# Prefix Settings
## prefixキーをC-gに変更する
set -g prefix C-g
## C-bのキーバインドを解除する
unbind C-b

# Basic Settings
## キーストロークのディレイを減らす
set -sg escape-time 1
## ウィンドウのインデックスを1から始める
set -g base-index 1
## ペインのインデックスを1から始める
setw -g pane-base-index 1
## 設定ファイルをリロードする
bind r source-file ~/.tmux.conf \; display "Reloaded!"
## マウス操作を有効にする
setw -g mouse on
## デフォルトのshellをログインシェルと同じものに設定
set-option -g default-shell "$SHELL"
set -g default-command "$SHELL"

# Pane Settings
## | でペインを縦に分割する(同ディレクトリで分割)
bind | split-window -h -c '#{pane_current_path}'
## - でペインを横に分割する(同ディレクトリで分割)
bind - split-window -v -c '#{pane_current_path}'
## Vimのキーバインドでペインを移動する
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+
## Vimのキーバインドでペインをリサイズする
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Color Settings
## 256色端末を使用する
set -g default-terminal "screen-256color"
## アクティブなペインを目立たせる
set -g pane-active-border-style bg=yellow,fg=white
## ステータスバーの色を設定する
set -g status-style bg="#303030",fg="colour220",bright
## アクティブなウィンドウを目立たせる
setw -g window-status-current-style bg=red,fg=white,bright
## コマンドラインの色を設定する
set -g message-style bg="#303030",fg=white,bright

# Status Bar Settings
## 左パネルを設定する
set -g status-left-length 40
set -g status-left "#[fg=cyan,bg=#303030]#{?client_prefix,#[reverse],}#H#[fg=colour220,bg=#303030][#S/#(tmux ls | wc -l | sed 's/ //g')]"
## 右パネルを設定する
set -g status-right "#[fg=cyan][%Y-%m-%d(%a) %H:%M]"
#set -g status-right "session  | #(tmux show-options -g prefix)"
### tmuxにディレクトリ位置やgitのブランチなどを表示する
### 動かしたいけどうまいこと動いてくれん！
#set-option -g pane-border-status bottom
#set-option -g pane-border-format "#[fg=black,bg=blue] #P #(tmux-pane-border '#{pane_current_path}')"
#set-option -g pane-border-fg colour023
#set-option -g pane-active-border-fg blue
## リフレッシュの間隔を設定する(デフォルト 15秒)
set -g status-interval 60
## ウィンドウリストの位置を中心寄せにする
set -g status-justify centre
## ステータスバーを上部に表示する
set -g status-position top
## ヴィジュアルノーティフィケーションを有効にする
setw -g monitor-activity on
set -g visual-activity on

# Copy mode Settings
## viのキーバインドを使用する
setw -g mode-keys vi
## クリップボード共有を有効にãる
set-option -g default-command "reattach-to-user-namespace -l zsh"
## コピーモードの操作をvi風に設定する
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
unbind -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"

# applications
## tig: Ctrl + t で別ウィンドウでtigを起動
bind -n C-t new-window -a -n "tig:#W" -c "#{pane_current_path}" "if [[ $(tmux display-message -p '#W') =~ tig:n?vim? ]]; then tig status; else tig; fi"

# Plugin Settings
## プラグインマネージャー
set -g @plugin 'tmux-plugins/tpm'
## tmux環境の保存/復元プラグイン
set -g @plugin "tmux-plugins/tmux-resurrect" # prefix + Ctrl sで保存
set -g @plugin "tmux-plugins/tmux-continuum" # prefix + Ctrl rで復元
#set -g @continuum-boot 'on'  # PC起動時に自動でtmuxスタート(.zshrcで設定してる関数と競合ない？)
## Initialize TMUX plugin manager (keep this line at the very bottom of   tmux.conf)
run '~/.tmux/plugins/tpm/tpm' 

# ===== logging =====
#
# C-b C-p Start logging.
bind-key C-p pipe-pane -o '/bin/sh -c "while read -r LINE; do echo \"[\$(date +\"%%Y_%%m%%d_%%H%%M%%S_%%N\")] \${LINE}\" >> \${HOME}/.tmux/log/\$(date +%Y%m%d-%H%M%S)-#S-#I.#P.log; done "' \; display-message "Logging start."
# C-b C-o Stop logging
bind-key C-o pipe-pane \; display-message "Logging end."
# C-b v Open new window. Logging always. (-n is set window name.)
bind-key v new-window -n 'logging...' \; pipe-pane -o '/bin/sh -c "while read -r LINE; do echo \"[\$(date +\"%%Y_%%m%%d_%%H%%M%%S_%%N\")] \${LINE}\" >> \${HOME}/.tmux/log/\$(date +%Y%m%d-%H%M%S)-#S-#I.#P.log; done "'
